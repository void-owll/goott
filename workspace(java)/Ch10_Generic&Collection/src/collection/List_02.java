package collection;

import java.util.ArrayList;
import java.util.List;

/*
 * 컬렉션 프레임워크
 * - 컬렉션의 사전적 의미 : 수집해서 모으다, 저장한다는 의미.
 * - 자바에서 배열은 여러 개의 데이터를 다루는데 편리한 자료구조이지만, 
 *   삽입과 삭제가 빈번하고, 데이터의 크기를 예측할 수 없는 응용 프로그램에서는
 *   사용하기가 어렵다.
 *    예를 든다면, 많은 사람의 이름과 전화번호를 저장하고 삽입, 삭제가 빈번한
 *    전화번호부 관리 프로그램에서 배열을 사용한다면 프로그램 작성에
 *    어려움을 겪게 됨.
 * - 자바에서의 컬렉션은 데이터의 추가, 삭제, 수정, 검색 등을 효과적으로 
 *   제공해 주는 자료구조 관련 클래스임.
 *   ==> 값을 담을 수 있는 그릇을 의미함(컨테이너의 개념).
 * - java.util 패키지에 포함이 되어 있음.
 * - 인터페이스를 통해서 정형화된 방법으로 다양한 컬렉션 클래스를 이용.
 * 
 * - 컬렉션 프레임워크.
 *   1) 컬렉션을 표준화하여 설계해 놓은 인터페이스.
 *   2) List 계열, Set 계열, Map 계열
 *   
 * - 컬렉션의 특징
 *   1) 컬렉션은 제네릭(generic) 이라는 기법으로 만들어져 있음.
 *      컬렉션 클래스의 이름에는 <E>, <K>, <V> 등이 항상 포함되어 있음.
 *      이들을 타입 매개변수라고 함.
 *      해당 위치에 구체적인 타입을 명시하여 해당 타입만 저장할 수 있음
 *   2) 컬렉션의 요소는 객체들만 사용이 가능함. 
 *      일반 기본 타입의 자료형은 컬렉션 요소로 사용이 불가능함.  
 */


/*
 * ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
 * ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
 * ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
 * ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
 * 																	☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
 * 1. List 계열의 컬렉션 프레임워크의 특징							★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
 *    - 자료의 순서가 보장(index 가 있음) : 정렬 기능 제공.			☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
 *    - 중복 데이터 허용.											★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
 *    - List 인터페이스의 자식클래스로 구현							☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
 *      ==> ArrayList(많이 사용함), LinkedList(가끔)				★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
 *          Vector(가끔 - 멀티쓰레드에 특화되어 있음)				☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
 *    - 특히 DB에 데이터를 레코드 단위로 저장하거나,				★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
 *      저장된 데이터를 가져올 경우에 많이 사용이 됨.				☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
 *      															★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
 * ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
 * ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
 * ★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆
 * ☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
 */
public class List_02 {
	public static void main(String[] args) {
		// List 계열 컬렉션 객체 생성 - 다형성을 이용한 객체 생성
		List<String> list = new ArrayList<String>();
		
		// 1. add(value) : value(데이터)를 추가해 주는 메서드.
		list.add("홍길동");
		list.add("세종대왕");
		list.add("유관순");
		list.add("이순신");
		list.add("신사임당");
		list.add("윤관순");
		
		// 2. size() : 데이터의 크기를 정수값으로 반환해 주는 메서드.
		System.out.println(list.size());
	
		
		// 3. get(index) : ArrayList에 저장되어 있는 데이터를 가져와서 출력해 주는 메서드.
		System.out.println("list[1] 데이터 >> " + list.get(1));
		
		// ArrayList에 있는 모든 데이터를 화면에 출력해 보자.
		for(int i=0; i<list.size(); i++) {
			System.out.println("list["+i+"] >>> " + list.get(i));
		}
		System.out.println();
		System.out.println("개선된 for문 : ");
		for(String element : list) {
			System.out.println("element >> " + element);
		}
		System.out.println();
		
		// 4. clear() : ArrayList 의 모든 데이터를 삭제하는 메서드.
		list.clear();
		System.out.println("삭제 후 크기 >> " + list.size());
		for(String element : list) {
			System.out.println("element >> " + element);
		}
		System.out.println();
		
		// 5. isEmpty() : ArrayList가 비어있는지 아닌지를 체크하는 메서드.
		//				  ==> 반환형은 boolean 타입.
		System.out.println("list empty??? >> " + list.isEmpty());
		System.out.println();
		System.out.println("데이터 추가됨.");
		list.add("홍길동");
		list.add("세종대왕");
		list.add("유관순");
		list.add("이순신");
		list.add("신사임당");
		list.add("윤관순");
		
		// 6. remove(index) : ArrayList의 특정 요소(index)를 제거하는 메서드.
		//					  다음 index 부터 index 값이 한 칸씩 당겨진다. 
		list.remove(2);
		System.out.println("list.remove(2) 실행됨.");
		for(int i=0; i<list.size(); i++) {
			System.out.println("list["+i+"] >>> " + list.get(i));
		}
		System.out.println();
		
		// 7. add(index, element(값))
		//    ==> ArrayList의 특정 index 에 element 를 추가하는 메서드. 
		//  	  해당 index 에 추가가 되고, 기존에 있던 데이터들은 index 가 뒤로 밀린다. 
		list.add(2, "강감찬");
		System.out.println("list.add(2, '강감찬') 실행됨.");
		for(int i=0; i<list.size(); i++) {
			System.out.println("list["+i+"] >>> " + list.get(i));
		}
	}
}
